import os
from collections import defaultdict
from django.core.management.base import BaseCommand
from telegram import ReplyKeyboardMarkup, KeyboardButton, Update, user
from telegram.ext import ConversationHandler, MessageHandler, CommandHandler, Updater, Filters, CallbackContext
from dotenv import load_dotenv
import random

from telbot.models import Profile, Message, Photo
from django.core.files import File

load_dotenv()
token = os.getenv('TELEGRAM_TOKEN')

PHOTO, NAME = range(2)

is_authorisation = False

categories = [
    'üöñ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    'üëî –û–¥–µ–∂–¥–∞, –æ–±—É–≤—å',
    'üíç –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è',
    'üëï –î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å',
    'üß∏ –ò–≥—Ä—É—à–∫–∏ –∏ –¥–µ—Ç—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–≤–µ—â–∏',
    'üì∫ –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
    'üõã –ú–µ–±–µ–ª—å –∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–Ω—ã–µ –≤–µ—â–∏',
    'üç≤ –ö—É—Ö–æ–Ω–Ω–∞—è —É—Ç–≤–∞—Ä—å',
    'ü•ï –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
    'üèó –í–µ—â–∏ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞',
    '‚òò –†–∞—Å—Ç–µ–Ω–∏—è',
    'üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
    'üè∏ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –≤–µ—â–∏',
    'üé® –í–µ—â–∏ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Ö–æ–±–±–∏',
    'üèÜ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –≤–µ—â–∏'
 ]

random_photo = defaultdict()
random_photo_ex = defaultdict()


class Command(BaseCommand):
    help = '–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç'

    def handle(self, *args, **kwargs):
        updater = Updater(token, use_context=True)
        dispatcher = updater.dispatcher

        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(Filters.text(categories), name_category_handler),
            ],
            states={
                PHOTO: [
                    MessageHandler(Filters.photo, photo_handler, pass_user_data=True),
                ],
                NAME: [
                    MessageHandler(Filters.text, name_thing_handler, pass_user_data=True),
                ]
            },
            fallbacks=[
                MessageHandler(Filters.text, cancel_handler),
            ],
        )

        dispatcher.add_handler(CommandHandler('start', start_bot))

        dispatcher.add_handler(conv_handler)

        #dispatcher.add_handler(MessageHandler(filters=Filters.text, callback=find_thing_handler))

        dispatcher.add_handler(MessageHandler(filters=Filters.text, callback=select_category_handler))

        #dispatcher.add_handler(MessageHandler(filters=Filters.text, callback=find))

        updater.start_polling()
        updater.idle()


def main_keyboard(user_id):
    database_user_id = Profile.objects.filter(tg_id=user_id)
    active_user = Message.objects.filter(profile_id=database_user_id[0].id)
    if active_user.count() > 0:
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å'),
                    KeyboardButton(text='üîç –ù–∞–π—Ç–∏ –≤–µ—â—å')
                ],
            ],
            resize_keyboard=True
        )
        return markup
    else:
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å'),
                ],
            ],
            resize_keyboard=True
        )
        return markup


def first_category_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text='üöñ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'),
                KeyboardButton(text='üëî –û–¥–µ–∂–¥–∞, –æ–±—É–≤—å'),
            ],
            [
                KeyboardButton(text='üíç –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è'),
                KeyboardButton(text='üëï –î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å'),
            ],
            [
                KeyboardButton(text='üß∏ –ò–≥—Ä—É—à–∫–∏ –∏ –¥–µ—Ç—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–≤–µ—â–∏'),
                KeyboardButton(text='üì∫ –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞'),
            ],
            [
                KeyboardButton(text='üõã –ú–µ–±–µ–ª—å –∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–Ω—ã–µ –≤–µ—â–∏'),
                KeyboardButton(text='üç≤ –ö—É—Ö–æ–Ω–Ω–∞—è —É—Ç–≤–∞—Ä—å'),
            ],
            [
                KeyboardButton(text='üîÅ –ù–∞ –≥–ª–∞–≤–Ω—É—é'),
                KeyboardButton(text='‚û° –í–ø–µ—Ä–µ–¥'),
            ],
        ],
        resize_keyboard=True
    )
    return markup


def second_category_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text='ü•ï –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è'),
                KeyboardButton(text='üèó –í–µ—â–∏ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞'),
            ],
            [
                KeyboardButton(text='‚òò –†–∞—Å—Ç–µ–Ω–∏—è'),
                KeyboardButton(text='üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'),
            ],
            [
                KeyboardButton(text='üè∏ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –≤–µ—â–∏'),
                KeyboardButton(text='üé® –í–µ—â–∏ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Ö–æ–±–±–∏'),
            ],
            [
                KeyboardButton(text='üèÜ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –≤–µ—â–∏'),
            ],
            [
                KeyboardButton(text='üîÅ –ù–∞ –≥–ª–∞–≤–Ω—É—é'),
                KeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥'),
            ],
        ],
        resize_keyboard=True
    )
    return markup


def cancel_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'),
            ],
        ],
        resize_keyboard=True
    )
    return markup


def find_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text='üîç –ù–∞–π—Ç–∏ –≤–µ—â—å'),
                KeyboardButton(text='üëç –ù—Ä–∞–≤–∏—Ç—Å—è'),
                KeyboardButton(text='üëè –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–º–µ–Ω'),
            ],
            [
                KeyboardButton(text='üîÅ –ù–∞ –≥–ª–∞–≤–Ω—É—é'),
            ]
        ],
        resize_keyboard=True
    )
    return markup


def start_bot(update, context):
    write_user_to_db(update)
    user_id = update.effective_chat.id
    random_photo[update.effective_chat.id] = []
    random_photo_ex[update.effective_chat.id] = []
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–µ—â–µ–π.\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é.",
        reply_markup=main_keyboard(user_id),
    )


def select_category_handler(update, context):
    if update.message.text == '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
            reply_markup=first_category_keyboard(),
        )

    elif update.message.text == 'üîç –ù–∞–π—Ç–∏ –≤–µ—â—å':
        photo_path, photo = get_photo_to_show(update)
        message = Message.objects.get(photo=photo)
        send_photo_to_user(update, context, path=photo_path)
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'–ú—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å:\n{message.name}\n–ò–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {message.category}',
            reply_markup=find_keyboard()
        )
        random_photo_ex[update.effective_chat.id].append(photo)

    elif update.message.text == 'üëç –ù—Ä–∞–≤–∏—Ç—Å—è':
        write_liked_photo_to_db(update)
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ª–∏—á–Ω–æ!',
            reply_markup=find_keyboard()
        )

    elif update.message.text == 'üëè –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–º–µ–Ω':
        write_exchange_photo_to_db(update)
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–•–æ—Ä–æ—à–∞—è –∏–¥–µ—è!\n–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º, –≥–æ—Ç–æ–≤ –ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –∫ –æ–±–º–µ–Ω—É —Å –≤–∞–º–∏',
            reply_markup=find_keyboard()
        )
        owner = get_owner_photo(update)
        exchange_users = get_to_exchange_users(owner)
        random_photo_ex[update.effective_chat.id].clear()
        if update.effective_chat.id in exchange_users:
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f'–í–ª–∞–¥–µ–ª–µ—Ü {owner.name} –≥–æ—Ç–æ–≤ –∫ –æ–±–º–µ–Ω—É',
                reply_markup=find_keyboard()
            )

    elif update.message.text == '‚û° –í–ø–µ—Ä–µ–¥':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–í—ã –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
            reply_markup=second_category_keyboard()
        )
    elif update.message.text == '‚¨Ö –ù–∞–∑–∞–¥':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
            reply_markup=first_category_keyboard()
        )
    elif update.message.text == 'üîÅ –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        user_id = update.effective_chat.id
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.',
            reply_markup=main_keyboard(user_id)
        )


def find_thing_handler(update, context):
    if update.message.text == 'üîç –ù–∞–π—Ç–∏ –≤–µ—â—å':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–ü–æ–∫–∞–∑–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –≤–µ—â—å –∏–∑ –±–∞–∑—ã –±–æ—Ç–∞.',
            reply_markup=find_keyboard()
        )
        photo_path = get_photo_to_show(update)
        print(photo_path)
        send_photo_to_user(update, context, path=photo_path)

    elif update.message.text == 'üîÅ –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        user_id = update.effective_chat.id
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.',
            reply_markup=main_keyboard(user_id)
        )


def name_category_handler(update, context):
    if update.message.text in categories:
        write_m_category_to_db(update)
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–µ—â–∏.',
            reply_markup=cancel_keyboard()
        )
        return PHOTO


def photo_handler(update, context):
    if update.message.photo[-1]:
        file = update.message.photo[-1].get_file()
        file.download()
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏.',
            reply_markup=cancel_keyboard()
        )
        write_m_photo_to_db(update)
        get_photo_to_show(update)
        return NAME


def name_thing_handler(update, context):
    if update.message.text != '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        user_id = update.effective_chat.id
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏ –ø–æ–ª—É—á–µ–Ω–æ!\n{update.message.text} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É.',
            reply_markup=main_keyboard(user_id)
        )
        write_m_name_to_db(update)
        return ConversationHandler.END


def cancel_handler(update, context):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        user_id = update.effective_chat.id
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–µ—â–∏. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start',
            reply_markup=main_keyboard(user_id)
        )
        return ConversationHandler.END


def write_user_to_db(update: Update):
    p, _ = Profile.objects.get_or_create(
            tg_id=update.effective_chat.id,
            defaults={
                'name': update.message.from_user.name,
            }
        )


def write_m_category_to_db(update: Update):
    p, _ = Profile.objects.get_or_create(
        tg_id=update.effective_chat.id,
        defaults={
            'name': update.message.from_user.name,
        }
    )
    Message.objects.create(
        profile=p,
        category=update.message.text
    )


def write_m_name_to_db(update: Update):
    p, _ = Profile.objects.get_or_create(
        tg_id=update.effective_chat.id,
        defaults={
            'name': update.message.from_user.name,
        }
    )
    last = Message.objects.filter(profile=p).last()
    print(last.id)
    Message(
        id=last.id,
        profile=p,
        category=last.category,
        name=update.message.text
    ).save()


def write_m_photo_to_db(update: Update):
    img_path = update.message.photo[-1].get_file()['file_path']
    img_path = img_path[img_path.find('file_'):]
    file_obj = File(open(img_path, mode='rb'), name='f1')
    photo, _ = Photo.objects.get_or_create(
        photo=file_obj
    )

    p, _ = Profile.objects.get_or_create(
        tg_id=update.effective_chat.id,

        defaults={
            'name': update.message.from_user.name,
        }
    )
    last = Message.objects.filter(profile=p).last()
    last.photo.add(photo)


def write_liked_photo_to_db(update: Update):
    profile = Profile.objects.get(
        tg_id=update.effective_chat.id
    )
    profile.liked_stuff.add(random_photo[update.effective_chat.id][0])


def write_exchange_photo_to_db(update: Update):
    profile = Profile.objects.get(
        tg_id=update.effective_chat.id
    )
    profile.exchange_stuff.add(random_photo_ex[update.effective_chat.id][0])


def send_photo_to_user(update: Update, context, path):
    
    context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=path,
        reply_markup=main_keyboard(update.effective_chat.id)
    )


def get_liked_stuff(update: Update):
    liked_stuff = Profile.objects.filter(liked_stuff__isnull=False).filter(tg_id=update.effective_chat.id)
    print(liked_stuff)
    if liked_stuff:
        liked_stuff = [[j.photo for j in i.liked_stuff.all()] for i in liked_stuff.all()][0]
        return liked_stuff
    else:
        return []


def get_owner_photo(update):
    print(random_photo_ex)
    photo = random_photo_ex[update.effective_chat.id][-1]
    message = Message.objects.get(photo=photo)
    profile = message.profile
    print(profile.name)
    return profile


def get_to_exchange_users(profile):
    exchange_stuff = profile.exchange_stuff
    exchange_users = []
    if len(exchange_stuff.all()) > 0:
        print(exchange_stuff.all())
        messages = Message.objects.filter(photo__in=exchange_stuff.all())
        exchange_users = set([i.profile for i in messages])
        exchange_users1 = [i.name for i in exchange_users]
        exchange_users = [i.tg_id for i in exchange_users]
        print(exchange_users1)

        return exchange_users
    return exchange_users


def get_filled_messages(update: Update):
    exclude_profile = Profile.objects.get(tg_id=update.effective_chat.id)

    messages = Message.objects.exclude(profile=exclude_profile)

    messages = messages.exclude(category__isnull=True).exclude(category__exact='')
    messages = messages.exclude(name__isnull=True).exclude(name__exact='')
    return messages


def get_message_random_photo(update):
    messages = get_filled_messages(update)
    message = random.choice(messages)

    photo = message.photo
    photo = [p for p in photo.all()][0]
    return photo


def get_photo_to_show(update: Update):
    liked_stuff = get_liked_stuff(update)
    if liked_stuff:
        liked_photos = Photo.objects.filter(photo__in=liked_stuff)
        message_photos = [get_message_random_photo(update) for _ in range(25)]
        photos = list(liked_photos) + message_photos
        photo = random.choice(photos)
        print(photo)
        random_photo[update.effective_chat.id].clear()
        random_photo[update.effective_chat.id].append(photo)
        return photo.photo, photo

    else:
        photo = get_message_random_photo(update)

        random_photo[update.effective_chat.id].clear()
        random_photo[update.effective_chat.id].append(photo)
        return photo.photo, photo