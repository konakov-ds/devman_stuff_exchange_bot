import os
from telegram import ReplyKeyboardMarkup, KeyboardButton, Update, keyboardbutton
from telegram.ext import MessageHandler, CommandHandler, Updater, Filters, ConversationHandler
from dotenv import load_dotenv


load_dotenv()
# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
token = os.getenv('TELEGRAM_TOKEN')

PHOTO, NAME = range(2)

is_authorisation = False

categories = [
    'üöñ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    'üëî –û–¥–µ–∂–¥–∞, –æ–±—É–≤—å',
    'üíç –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è',
    'üëï –î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å',
    'üß∏ –ò–≥—Ä—É—à–∫–∏ –∏ –¥–µ—Ç—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–≤–µ—â–∏',
    'üì∫ –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
    'üõã –ú–µ–±–µ–ª—å –∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–Ω—ã–µ –≤–µ—â–∏',
    'üç≤ –ö—É—Ö–æ–Ω–Ω–∞—è —É—Ç–≤–∞—Ä—å',
    'ü•ï –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
    'üèó –í–µ—â–∏ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞',
    '‚òò –†–∞—Å—Ç–µ–Ω–∏—è',
    'üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
    'üè∏ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –≤–µ—â–∏',
    'üé® –í–µ—â–∏ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Ö–æ–±–±–∏',
    'üèÜ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –≤–µ—â–∏'
 ]


def main_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text='‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å'),
                KeyboardButton(text='üîç –ù–∞–π—Ç–∏ –≤–µ—â—å')
            ],
        ],
        resize_keyboard=True
    )
    return markup


def first_category_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text='üöñ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'),
                KeyboardButton(text='üëî –û–¥–µ–∂–¥–∞, –æ–±—É–≤—å'),
            ],
            [
                KeyboardButton(text='üíç –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è'),
                KeyboardButton(text='üëï –î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å'),               
            ],
            [
                KeyboardButton(text='üß∏ –ò–≥—Ä—É—à–∫–∏ –∏ –¥–µ—Ç—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–≤–µ—â–∏'),
                KeyboardButton(text='üì∫ –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞'),               
            ],
            [
                KeyboardButton(text='üõã –ú–µ–±–µ–ª—å –∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–Ω—ã–µ –≤–µ—â–∏'),
                KeyboardButton(text='üç≤ –ö—É—Ö–æ–Ω–Ω–∞—è —É—Ç–≤–∞—Ä—å'),               
            ],
            [
                KeyboardButton(text='üîÅ –ù–∞ –≥–ª–∞–≤–Ω—É—é'),
                KeyboardButton(text='‚û° –í–ø–µ—Ä–µ–¥'),               
            ],
        ],
        resize_keyboard=True
    )
    return markup


def second_category_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text='ü•ï –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è'),
                KeyboardButton(text='üèó –í–µ—â–∏ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞'),
            ],
            [
                KeyboardButton(text='‚òò –†–∞—Å—Ç–µ–Ω–∏—è'),
                KeyboardButton(text='üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'),               
            ],
            [
                KeyboardButton(text='üè∏ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –≤–µ—â–∏'),
                KeyboardButton(text='üé® –í–µ—â–∏ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Ö–æ–±–±–∏'),               
            ],
            [
                KeyboardButton(text='üèÜ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –≤–µ—â–∏'),        
            ],
            [
                KeyboardButton(text='üîÅ –ù–∞ –≥–ª–∞–≤–Ω—É—é'),
                KeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥'),               
            ],
        ],
        resize_keyboard=True
    )
    return markup


def cancel_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'),               
            ],
        ],
        resize_keyboard=True
    )
    return markup


def find_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text='üîç –ù–∞–π—Ç–∏ –≤–µ—â—å'),
                KeyboardButton(text='üëç –ù—Ä–∞–≤–∏—Ç—Å—è'),
                KeyboardButton(text='üëè –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–º–µ–Ω'),             
            ],
            [
                KeyboardButton(text='üîÅ –ù–∞ –≥–ª–∞–≤–Ω—É—é'),
            ]
        ],
        resize_keyboard=True
    )
    return markup


def start_bot(update, context):
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–µ—â–µ–π.\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é.",
        reply_markup=main_keyboard(),
    )


def select_category_handler(update, context):
    if update.message.text == '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
            reply_markup=first_category_keyboard(),
        )
    elif update.message.text == '‚û° –í–ø–µ—Ä–µ–¥':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–í—ã –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
            reply_markup=second_category_keyboard()
        )
    elif update.message.text == '‚¨Ö –ù–∞–∑–∞–¥':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
            reply_markup=first_category_keyboard()
        )
    elif update.message.text == 'üîÅ –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.',
            reply_markup=main_keyboard()
        )


def find_thing_handler(update, context):
    if update.message.text == 'üîç –ù–∞–π—Ç–∏ –≤–µ—â—å':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–ü–æ–∫–∞–∑–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –≤–µ—â—å –∏–∑ –±–∞–∑—ã –±–æ—Ç–∞.',
            reply_markup=finde_keybord()
        )
    elif update.message.text == 'üîÅ –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.',
            reply_markup=main_keyboard()
        )


def name_category_handler(update, context):
    if update.message.text in categories:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–µ—â–∏.',
            reply_markup=cancel_keyboard()
        )
        return PHOTO


def photo_handler(update, context):
    if update.message.photo[-1]:
        file = update.message.photo[-1].get_file()
        file.download()
        context.bot.send_message(
                chat_id=update.effective_chat.id,
                text='–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏.',
                reply_markup=cancel_keyboard()
            )
        return NAME


def name_thing_handler(update, context):
    if update.message.text != '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏ –ø–æ–ª—É—á–µ–Ω–æ!\n{update.message.text} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É.',
            reply_markup=main_keyboard()
        )
        return ConversationHandler.END


def cancel_handler(update: Update, context):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–µ—â–∏. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start',
            reply_markup=main_keyboard()
        )
        return ConversationHandler.END


def main():
    updater = Updater(token, use_context=True)
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.text(categories), name_category_handler),
        ],
        states={
            PHOTO: [
                MessageHandler(Filters.photo, photo_handler, pass_user_data=True),
            ],
            NAME: [
                MessageHandler(Filters.text, name_thing_handler, pass_user_data=True),
            ]
        },
        fallbacks=[
            MessageHandler(Filters.text, cancel_handler),
        ],
    )

    dispatcher.add_handler(CommandHandler('start', start_bot))

    dispatcher.add_handler(conv_handler)

    dispatcher.add_handler(MessageHandler(filters=Filters.text, callback=select_category_handler))

    dispatcher.add_handler(MessageHandler(filters=Filters.text, callback=find_thing_handler))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()